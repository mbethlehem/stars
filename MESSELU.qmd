---
title: "MESSELU"
author: "Bethlehem MESSELU"
format: html
---

```{r, message=FALSE, warning=FALSE}
here::i_am("stars.Rproj")
library(here)
library(vroom)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
library(stringr)
```

[Here](https://github.com/mbethlehem/stars.git) is the link to my Github repository.

```{r}
planets <- vroom(here("data", "planets.csv"), 
                          locale=locale(decimal_mark = ","))
```

The planets dataset contains `r planets |> nrow()` planets and cointains `r planets |> ncol()` variables, which coincides with the description of the datasets.

```{r echo=FALSE}
valeur <- all(c(planets |> nrow(), planets |> ncol()) == c(851, 8))
```

```{r}
if(valeur){ 
  print("The planets dataset contains 851 planets and cointains 8 variables, which coincides with the description of the dataset.")
}
if(!valeur){
  print("The planets dataset dimension does not coincide with the description of the dataset.")
} 
```

The numerical variables are "PLANET_CODE", "STAR_KEY", "RELATIVE MASS", "Density" and "Radius (Earth)". We will check if there all are numerical.

```{r}
## Does PLANET_CODE take numerical value ?

planets |> pull(PLANET_CODE) |> is.numeric()

## Does STAR_KEY take numerical value ?

planets |> pull(STAR_KEY) |> is.numeric()

## Does RELATIVE MASS take numerical value ?

planets |> pull(`RELATIVE MASS`) |> is.numeric()

## Does Density take numerical value ?

planets |> pull(Density) |> is.numeric()

## Does Radius (Earth) take numerical value ?

planets |> pull(`Radius (Earth)`) |> is.numeric()

```

## Question 4

| Description                                            | Values                                                                                                                                     |
|------------------------------------|------------------------------------|
| Number of Planets                                      | `r planets |> nrow()`                                                                                                                      |
| Number of variables                                    | `r planets |> ncol()`                                                                                                                      |
| Number of variables with missing vaalues               | `r planets |> select(where(anyNA)) |> is.na() |> ncol()`                                                                                   |
| Number of missing values in `RELATIVE MASS`            | `` `r (planets |> select(where(anyNA)) |> is.na() |>  colSums())[1]` ``                                                                    |
| Number of missing values in \`Radius (Earth)\`         | `r (planets |> select(where(anyNA)) |> is.na() |>  colSums())[2]`                                                                          |
| Number of observations with at least one missing value | `planets |> mutate(across(everything(), is.na)) |> rowwise() |> summarise(na_var = any(c_across(everything()))) |> summarise(sum(na_var))` |

##Question 5

```{r}
planets |> filter(!is.na(`RELATIVE MASS`)) |> filter(!is.na(`Radius (Earth)`)) |> ggplot(aes(x=`Radius (Earth)`, y=`RELATIVE MASS`)) + geom_point()
```

## Question 6

Report in a table the most extreme planets with respect to the numerical variables. This should include, for instance, the densest and least dense planets.

```{r}
planets |> slice_max(order_by = STAR_KEY)
planets |> slice_min(order_by = STAR_KEY)

planets |> slice_max(order_by = `RELATIVE MASS`)
planets |> slice_min(order_by = `RELATIVE MASS`)

planets |> slice_max(order_by = Density)
planets |> slice_min(order_by = Density)

planets |> slice_max(order_by = `Radius (Earth)`)
planets |> slice_min(order_by = `Radius (Earth)`)

```

## Question 7

```{r}
climate <- planets |> reframe(ter = unlist(str_split(`Type Of Terrain`, ":")), .by=PLANET_CODE) |> unnest(ter)
```

## Question 8

Represent graphically the distribution of the number of different climates per planet. Provide acsimilar representation for the terrain types.

```{r}
table <- climate |> count(PLANET_CODE)
```

```{r}
table |> ggplot(aes(x= PLANET_CODE, y=n)) + geom_col()
```

